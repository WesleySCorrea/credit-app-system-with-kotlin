<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="me.dio.credit.application.system.controllers.CustomerControllerTest" tests="7" skipped="0" failures="1" errors="0" timestamp="2024-02-25T22:38:20" hostname="WESLEY" time="43.869">
  <properties/>
  <testcase name="should not find customer with invalid id and return 400 status()" classname="me.dio.credit.application.system.controllers.CustomerControllerTest" time="11.547"/>
  <testcase name="should create a customer and return 201 status()" classname="me.dio.credit.application.system.controllers.CustomerControllerTest" time="0.181">
    <failure message="java.lang.AssertionError: JSON path &quot;$.id&quot; expected:&lt;1&gt; but was:&lt;2&gt;" type="java.lang.AssertionError">java.lang.AssertionError: JSON path &quot;$.id&quot; expected:&lt;1&gt; but was:&lt;2&gt;
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:59)
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:122)
	at org.springframework.test.util.JsonPathExpectationsHelper.assertValue(JsonPathExpectationsHelper.java:123)
	at org.springframework.test.web.servlet.result.JsonPathResultMatchers.lambda$value$2(JsonPathResultMatchers.java:111)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at me.dio.credit.application.system.controllers.CustomerControllerTest.should create a customer and return 201 status(CustomerControllerTest.kt:71)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:728)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:218)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:214)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:139)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:119)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:94)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:89)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:62)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
	at jdk.proxy1/jdk.proxy1.$Proxy2.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:113)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:65)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
</failure>
  </testcase>
  <testcase name="should delete customer by id and return 204 status()" classname="me.dio.credit.application.system.controllers.CustomerControllerTest" time="0.028"/>
  <testcase name="should not save a customer with empty firstName and return 400 status()" classname="me.dio.credit.application.system.controllers.CustomerControllerTest" time="0.029"/>
  <testcase name="should find customer by id and return 200 status()" classname="me.dio.credit.application.system.controllers.CustomerControllerTest" time="32.023"/>
  <testcase name="should not delete customer by id and return 400 status()" classname="me.dio.credit.application.system.controllers.CustomerControllerTest" time="0.013"/>
  <testcase name="should not save a customer with same CPF and return 409 status()" classname="me.dio.credit.application.system.controllers.CustomerControllerTest" time="0.041"/>
  <system-out><![CDATA[19:38:14.671 [Test worker] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [me.dio.credit.application.system.controllers.CustomerControllerTest]: CustomerControllerTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
19:38:14.803 [Test worker] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration me.dio.credit.application.system.CreditApplicationSystemApplication for test class me.dio.credit.application.system.controllers.CustomerControllerTest

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.2.3)

2024-02-25T19:38:15.276-03:00  INFO 29464 --- [    Test worker] m.d.c.a.s.c.CustomerControllerTest       : Starting CustomerControllerTest using Java 17.0.9 with PID 29464 (started by Wesle in C:\Users\Wesle\Documents\Workspace\Kotlin\credit-application-system)
2024-02-25T19:38:15.278-03:00  INFO 29464 --- [    Test worker] m.d.c.a.s.c.CustomerControllerTest       : The following 1 profile is active: "test"
2024-02-25T19:38:16.443-03:00  INFO 29464 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-25T19:38:16.525-03:00  INFO 29464 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 71 ms. Found 2 JPA repository interfaces.
2024-02-25T19:38:17.042-03:00  INFO 29464 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2024-02-25T19:38:17.245-03:00  INFO 29464 --- [    Test worker] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-02-25T19:38:17.247-03:00  INFO 29464 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2024-02-25T19:38:17.298-03:00  INFO 29464 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-02-25T19:38:17.381-03:00  INFO 29464 --- [    Test worker] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.4.4.Final
2024-02-25T19:38:17.435-03:00  INFO 29464 --- [    Test worker] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2024-02-25T19:38:17.717-03:00  INFO 29464 --- [    Test worker] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-02-25T19:38:17.767-03:00  WARN 29464 --- [    Test worker] org.hibernate.orm.deprecation            : HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2024-02-25T19:38:18.663-03:00  INFO 29464 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
Hibernate: 
    drop table if exists credit cascade 
Hibernate: 
    drop table if exists customer cascade 
Hibernate: 
    create table credit (
        credit_value numeric(38,2) not null,
        day_first_installment date not null,
        number_of_installment integer not null,
        customer_id bigint,
        id bigint generated by default as identity,
        credit_code uuid not null unique,
        status varchar(255) check (status in ('IN_PROGRESS','APPROVED','REJECTT')),
        primary key (id)
    )
Hibernate: 
    create table customer (
        income numeric(38,2) not null,
        id bigint generated by default as identity,
        cpf varchar(255) not null unique,
        email varchar(255) not null unique,
        first_name varchar(255) not null,
        last_name varchar(255) not null,
        password varchar(255) not null,
        street varchar(255) not null,
        zip_code varchar(255) not null,
        primary key (id)
    )
Hibernate: 
    alter table if exists credit 
       add constraint FKosxy6eoxva5hh9tschjwx1nf0 
       foreign key (customer_id) 
       references customer
2024-02-25T19:38:18.723-03:00  INFO 29464 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-02-25T19:38:19.398-03:00  INFO 29464 --- [    Test worker] o.s.d.j.r.query.QueryEnhancerFactory     : Hibernate is in classpath; If applicable, HQL parser will be used.
2024-02-25T19:38:19.791-03:00  WARN 29464 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-02-25T19:38:20.313-03:00  INFO 29464 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-02-25T19:38:20.358-03:00  INFO 29464 --- [    Test worker] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2024-02-25T19:38:20.359-03:00  INFO 29464 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2024-02-25T19:38:20.362-03:00  INFO 29464 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 1 ms
2024-02-25T19:38:20.403-03:00  INFO 29464 --- [    Test worker] m.d.c.a.s.c.CustomerControllerTest       : Started CustomerControllerTest in 5.43 seconds (process running for 6.773)
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    insert 
    into
        customer
        (street, zip_code, cpf, email, first_name, income, last_name, password, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0 
    where
        c1_0.id=?

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/customers/4
       Parameters = {}
          Headers = [Accept:"application/json"]
             Body = null
    Session Attrs = {}

Handler:
             Type = me.dio.credit.application.system.controllers.CustomerController
           Method = me.dio.credit.application.system.controllers.CustomerController#findById(long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = me.dio.credit.application.system.exception.BusinessException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"title":"Bad Request!","timestamp":"2024-02-25T19:38:31.3654201","status":400,"exception":"class me.dio.credit.application.system.exception.BusinessException","details":{"null":"id 4 not found"}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    select
        c1_0.customer_id,
        c1_0.id,
        c1_0.credit_code,
        c1_0.credit_value,
        c1_0.day_first_installment,
        c1_0.number_of_installment,
        c1_0.status 
    from
        credit c1_0 
    where
        c1_0.customer_id=?
Hibernate: 
    delete 
    from
        customer 
    where
        id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    insert 
    into
        customer
        (street, zip_code, cpf, email, first_name, income, last_name, password, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    select
        c1_0.customer_id,
        c1_0.id,
        c1_0.credit_code,
        c1_0.credit_value,
        c1_0.day_first_installment,
        c1_0.number_of_installment,
        c1_0.status 
    from
        credit c1_0 
    where
        c1_0.customer_id=?
Hibernate: 
    delete 
    from
        customer 
    where
        id=?

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /api/customers
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"168"]
             Body = {"firstName":"Teste","lastName":"TESTE","cpf":"28475934625","income":1000.0,"email":"teste@email.com","password":"1234","zipCode":"000000","street":"Rua do teste, 123"}
    Session Attrs = {}

Handler:
             Type = me.dio.credit.application.system.controllers.CustomerController
           Method = me.dio.credit.application.system.controllers.CustomerController#saveCustomer(CustomerDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"id":2,"firstName":"Teste","lastName":"TESTE","cpf":"28475934625","income":1000.0,"email":"teste@email.com","zipCode":"000000","street":"Rua do teste, 123"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    insert 
    into
        customer
        (street, zip_code, cpf, email, first_name, income, last_name, password, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0 
    where
        c1_0.id=?
Hibernate: 
    select
        c1_0.customer_id,
        c1_0.id,
        c1_0.credit_code,
        c1_0.credit_value,
        c1_0.day_first_installment,
        c1_0.number_of_installment,
        c1_0.status 
    from
        credit c1_0 
    where
        c1_0.customer_id=?
Hibernate: 
    delete 
    from
        customer 
    where
        id=?

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /api/customers/3
       Parameters = {}
          Headers = [Accept:"application/json"]
             Body = null
    Session Attrs = {}

Handler:
             Type = me.dio.credit.application.system.controllers.CustomerController
           Method = me.dio.credit.application.system.controllers.CustomerController#deleteCustomer(long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 204
    Error message = null
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /api/customers
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"163"]
             Body = {"firstName":"","lastName":"TESTE","cpf":"28475934625","income":1000.0,"email":"teste@email.com","password":"1234","zipCode":"000000","street":"Rua do teste, 123"}
    Session Attrs = {}

Handler:
             Type = me.dio.credit.application.system.controllers.CustomerController
           Method = me.dio.credit.application.system.controllers.CustomerController#saveCustomer(CustomerDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.bind.MethodArgumentNotValidException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"title":"Bad Request!","timestamp":"2024-02-25T19:38:32.2040892","status":400,"exception":"class org.springframework.web.bind.MethodArgumentNotValidException","details":{"firstName":"Invalid input"}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    insert 
    into
        customer
        (street, zip_code, cpf, email, first_name, income, last_name, password, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0 
    where
        c1_0.id=?

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/customers/4
       Parameters = {}
          Headers = [Accept:"application/json"]
             Body = null
    Session Attrs = {}

Handler:
             Type = me.dio.credit.application.system.controllers.CustomerController
           Method = me.dio.credit.application.system.controllers.CustomerController#findById(long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"id":4,"firstName":"Teste","lastName":"TESTE","cpf":"28475934625","income":1000.00,"email":"teste@email.com","zipCode":"000000","street":"Rua do teste, 123"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    select
        c1_0.customer_id,
        c1_0.id,
        c1_0.credit_code,
        c1_0.credit_value,
        c1_0.day_first_installment,
        c1_0.number_of_installment,
        c1_0.status 
    from
        credit c1_0 
    where
        c1_0.customer_id=?
Hibernate: 
    delete 
    from
        customer 
    where
        id=?
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0 
    where
        c1_0.id=?

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /api/customers/-381373056258148955
       Parameters = {}
          Headers = [Accept:"application/json"]
             Body = null
    Session Attrs = {}

Handler:
             Type = me.dio.credit.application.system.controllers.CustomerController
           Method = me.dio.credit.application.system.controllers.CustomerController#deleteCustomer(long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = me.dio.credit.application.system.exception.BusinessException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"title":"Bad Request!","timestamp":"2024-02-25T19:39:04.2424436","status":400,"exception":"class me.dio.credit.application.system.exception.BusinessException","details":{"null":"id -381373056258148955 not found"}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    insert 
    into
        customer
        (street, zip_code, cpf, email, first_name, income, last_name, password, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        customer
        (street, zip_code, cpf, email, first_name, income, last_name, password, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2024-02-25T19:39:04.272-03:00  WARN 29464 --- [    Test worker] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: 23505, SQLState: 23505
2024-02-25T19:39:04.272-03:00 ERROR 29464 --- [    Test worker] o.h.engine.jdbc.spi.SqlExceptionHelper   : Unique index or primary key violation: "PUBLIC.CONSTRAINT_INDEX_5 ON PUBLIC.CUSTOMER(CPF NULLS FIRST) VALUES ( /* 5 */ '28475934625' )"; SQL statement:
insert into customer (street,zip_code,cpf,email,first_name,income,last_name,password,id) values (?,?,?,?,?,?,?,?,default) [23505-224]

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /api/customers
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"168"]
             Body = {"firstName":"Teste","lastName":"TESTE","cpf":"28475934625","income":1000.0,"email":"teste@email.com","password":"1234","zipCode":"000000","street":"Rua do teste, 123"}
    Session Attrs = {}

Handler:
             Type = me.dio.credit.application.system.controllers.CustomerController
           Method = me.dio.credit.application.system.controllers.CustomerController#saveCustomer(CustomerDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.dao.DataIntegrityViolationException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 409
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"title":"Conflit!","timestamp":"2024-02-25T19:39:04.2814364","status":409,"exception":"class org.springframework.dao.DataIntegrityViolationException","details":{"org.hibernate.exception.ConstraintViolationException: could not execute statement [Unique index or primary key violation: \"PUBLIC.CONSTRAINT_INDEX_5 ON PUBLIC.CUSTOMER(CPF NULLS FIRST) VALUES ( /* 5 */ '28475934625' )\"; SQL statement:\ninsert into customer (street,zip_code,cpf,email,first_name,income,last_name,password,id) values (?,?,?,?,?,?,?,?,default) [23505-224]] [insert into customer (street,zip_code,cpf,email,first_name,income,last_name,password,id) values (?,?,?,?,?,?,?,?,default)]":"could not execute statement [Unique index or primary key violation: \"PUBLIC.CONSTRAINT_INDEX_5 ON PUBLIC.CUSTOMER(CPF NULLS FIRST) VALUES ( /* 5 */ '28475934625' )\"; SQL statement:\ninsert into customer (street,zip_code,cpf,email,first_name,income,last_name,password,id) values (?,?,?,?,?,?,?,?,default) [23505-224]] [insert into customer (street,zip_code,cpf,email,first_name,income,last_name,password,id) values (?,?,?,?,?,?,?,?,default)]; SQL [insert into customer (street,zip_code,cpf,email,first_name,income,last_name,password,id) values (?,?,?,?,?,?,?,?,default)]; constraint [\"PUBLIC.CONSTRAINT_INDEX_5 ON PUBLIC.CUSTOMER(CPF NULLS FIRST) VALUES ( /* 5 */ '28475934625' )\"; SQL statement:\ninsert into customer (street,zip_code,cpf,email,first_name,income,last_name,password,id) values (?,?,?,?,?,?,?,?,default) [23505-224]]"}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: 
    select
        c1_0.id,
        c1_0.street,
        c1_0.zip_code,
        c1_0.cpf,
        c1_0.email,
        c1_0.first_name,
        c1_0.income,
        c1_0.last_name,
        c1_0.password 
    from
        customer c1_0
Hibernate: 
    select
        c1_0.customer_id,
        c1_0.id,
        c1_0.credit_code,
        c1_0.credit_value,
        c1_0.day_first_installment,
        c1_0.number_of_installment,
        c1_0.status 
    from
        credit c1_0 
    where
        c1_0.customer_id=?
Hibernate: 
    delete 
    from
        customer 
    where
        id=?
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
